---
layout: default
title: Rails Girls Uygulama Tutorial
permalink: app
---

# Rails Girls Uygulama Tutorial

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Sisteminizde Rails kurulu olduğundan emin olun.** [**Kurulum klavuzunu takip ederek**](/install) Rails kurabilirsiniz.


## Araçları tanıyalım

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Text Editörü

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  Vim ve Emacs kod yazmak ve dosyaları düzenlemek üzere kullanabileceğiniz text editörleridir.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Konsol (Windows'ta Komut İsteği olarak bilinir)

* Rails server'ı çalıştırabileceğiniz veya Rails komutlarını çalıştırabileceğiniz yer.
* Mac bilgisayarınızda "Terminal" arayarak, Windows bilgisayarınızda "Komut İstemi" arayarak bu programa ulaşabilirsiniz.

<h3><i class="icon-browser">&nbsp;</i></h3>

### Web tarayıcı

* (Firefox, Safari, Chrome) uygulamanızı görüntülemek için kullanılabilir.

</div>

Bu klavuz boyunca şöyle formatlanmış kod parçaları göreceksiniz:

{% highlight sh %}
some code
{% endhighlight %}

<div>
<p>Bunun anlamı gösterilen yazı bir koddur ve ya çalıştırılacaktır ya da dosyalarınızdan birine yazılacaktır. </p>
</div>

Çalışırken komutlar hakkında yardıma ihtiyaç duyarsanız şu belgeden yararlanabilirsiniz [handy cheatsheet for Ruby, Rails, console etc.](http://www.pragtob.info/rails-beginner-cheatsheet/)

### Önemli

İşletim sisteminize uygun komutları seçmeniz önemlidir - Windows, Mac ya da Linux konsollarında komutlar arasında bazı küçük farklar olabilir. Eğer sorun olursa komutların altındaki işletim sistemi sviç linklerini kullanın. Cloud servis kullanıyorsanız Windows bilgisayar kullanıyor olsanız bile servisteki Linux komutları geçerli olacaktır.

## *1.* Yeni uygulama üretmek

*railsgirls* adında yeni bir uygulama üreteceğiz.

İlk önce konsolu açalım:

* macOS: Spotlight açın, *Terminal* yazın ve  *Terminal* uygulamasını seçin.
* Windows: Start'a tıklayın *Command Prompt* arayın, sonra *Command Prompt with Ruby and Rails* tıklayıp çalıştırın.
* Linux (Ubuntu/Fedora): Uygulamalarda *Terminal* arayın ve çalıştırın.
* Cloud servis (örn. Codenvy): Hesabınıza girin, projenizi açın ve servisin konsol penceresini açın.

Sonra konsolda bu komutları girin:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p><code>projects</code> klasörünün gerçekten oluşturulmuş olduğunu listeleme komutu: <code>ls</code> kullanarak kontrol edebilirsiniz. Çıktıda <code>projects</code> klasörünü göreceksiniz. Şimdi çalıştığınız klasörü <code>projects</code> klasörüne değiştirmek için şunu girin:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Bu klasörün boş olduğunu görmek için yine <code>ls</code> komutunu çalıştırın. Şimdi <code>railsgirls</code> adında bir uygulama üretmek için şunu girin:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Bu <code>railsgirls</code> klasörü altında yeni uygulamamızı üretecektir, şimdi uygulama klasörümüzün de içine girelim:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Eğer şimdi <code>ls</code> komutu çalıştırırsanız <code>app</code> ave <code>config</code> gibi dosya ve klasörler göreceksiniz. Bundan sonra Rails server'ı çalıştırmak için şunu girin:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p><code>projects</code> klasörünün gerçekten oluşturulmuş olduğunu listeleme komutu: <code>dir</code> kullanarak kontrol edebilirsiniz. Çıktıda <code>projects</code> klasörünü göreceksiniz. Şimdi çalıştığınız klasörü <code>projects</code> klasörüne değiştirmek için şunu girin:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Bu klasörün boş olduğunu görmek için yine <code>dir</code> komutunu çalıştırın. Şimdi <code>railsgirls</code> adında bir uygulama üretmek için şunu girin:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Bu <code>railsgirls</code> klasörü altında yeni uygulamamızı üretecektir, şimdi uygulama klasörümüzün de içine girelim:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Eğer şimdi <code>dir</code> komutu çalıştırırsanız <code>app</code> ave <code>config</code> gibi dosya ve klasörler göreceksiniz. Bundan sonra Rails server'ı çalıştırmak için şunu girin:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>
</div>

<http://localhost:3000> adresini tarayıcınızda açın. Cloud servis kullandığınızda servise göre tarayıcının nasıl açılacağını servis sağlayıcının yardımından bulabilirsiniz.

Rails logosu olan ve "Yay! You’re on Rails!" yazısı olan bir sayfa görüyor olmalısınız, bunun anlamı Rails uygulamanız oluşturuldu ve de çalışıyor.

Dikkat ettiyseniz konsolda kursor görünmüyor çünkü şu anda konsolda Rails server'ı çalışıyor. 

Prompt yerine şunu görürsünüz:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

**İpucu:** Bazen bu ve diğer online klavuzlarda komutları başında bir `$` sembolü ile gösterilir. Bu genelde konsolda satırın başını gösteren bir standart gösterim şeklidir.
Komutlarınızın başında bu sembolü koymadan yazmalısınız. Sizin işletim sisteminizdeki konsolda `$` sembolü olmayabilir.

Komut prompt görünmezken yeni bir komut giremezsiniz. Eğer `cd` ya da başka komut çalıştırmak isteseniz çalışmayacaktır. Rails server çalışırken de böyle olur. Normal prompta dönmek için:

Terminalde <kbd>Ctrl</kbd>+<kbd>C</kbd> basarak server'dan çıkabilirsiniz.

**Eğitmen:** Her komutun ne yaptığını anlatın. Ne üretildi? Server ne yapar?


## *2.* Idea scaffold Üretin

Rails'in scaffold fonksiyonlarını kullanarak bize temel fikirlerimiz listelememizi, eklememizi, silmemizi ve görmemizi sağlayan sayfalarınkalıplarını hazırlayacağız. (list, add, remove, edit and view).

**Eğitmen:** Rails scaffold nedir? (Komutu açıklayın, model adı ve ilgili veri tabanı tabloları, isimlendirme standartları, özellikler ve tipler gibi.) Migration nedir ve ona neden ihtiyacınız var?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

scaffold proje klasörünüz içinde yeni dosyalar üretir, fakat tamamen çalışması için veri tabanımızı yenilemek amacıyla ve server'ı tekrar çalıştırmak amacıyla birkaç komut daha çalıştırmalıyız.

{% highlight sh %}
rails db:migrate
rails server
{% endhighlight %}

Tarayıcıda <http://localhost:3000/ideas> adresini açın. 

Sayfayı inceleyip gezinin ve bu komutların ortaya ne çıkardığına bir bakın.

## *3.* Tasarım

**Eğitmen:** HTML ve Rails arasındaki ilişkiyi anlatın. Görsellerin hangi parçası HTML hangisi Embedded Ruby (ERB)? MVC nedir ve bununla nasıl bir ilişkisi vardır? (Modeller ve kontrolörler HTML görselleri oluşturmakla sorumludur.)

Uygulama henüz pek güzel görünmüyor. Hadi bu konuda bir şeyler yapalım. Yakışıklı görselleri kolayca yapabilmek için Twitter Bootstrap projesini kullanacağız.

Text editörünüzde `app/views/layouts/application.html.erb` dosyasını açın ve şu satırın

{% highlight erb %}
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
{% endhighlight %}

üzerine şunları ekleyin

{% highlight erb %}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
{% endhighlight %}

ve

{% highlight erb %}
<%= yield %>
{% endhighlight %}

yerine şunu yazın

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Şimdi yerleşime bir de gezinti bar ve footer ekleyelim. Aynı dosyada `<body>` altına şunu ekleyin

{% highlight html %}
<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
  <div class="container">
    <a class="navbar-brand" href="/">The Idea App</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item active">
          <a class="nav-link" href="/ideas">Ideas</a>
        </li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

ve `</body>` satırı öncesine şunları ekleyin

{% highlight erb %}
<footer>
  <div class="container">
    Rails Girls <%= Time.now.year %>
  </div>
</footer>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js"></script>
{% endhighlight %}

Şimdi ideas tablosunun görüntüsünün de stilini biraz değiştirelim.  `app/assets/stylesheets/application.css` dosyasını açın ve en alta şunları ekleyin

{% highlight css %}
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
body { margin: 0; }
{% endhighlight %}

Şimdi dosyaları kaydettiğinizden emin olduktan sonra tarayıcınızda sayfayı yenileyin ve sonucu görün. Bir şey değişmedi mi? Belkide wifiye hiç bağlanmamışsınızdır.
HTML & CSS dosyalarını daha sonra da `app/assets/stylesheets/application.css` dosyasına eklemeler yaparak değiştirebilirsiniz.

**Eğitmen:** CSS ve yerleşimler hakkında kısaca anlatın.


## *4.* Resim upload eklemek

Rails uygulamasında dosya upload edebilmek için birkaç yazılım yüklemelisiniz.

Projenizdeki `Gemfile` dosyasını açın ve 

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

satırı altına şunu ekleyin

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Eğitmen:** Kütüphanelerin ne olduğunu ve nasıl faydalı olduğunu anlatın. Açık kaynak kodun ne olduğunu anlatın.

Konsolda <kbd>Ctrl</kbd>+<kbd>C</kbd> basarak server'dan çıkın.

Konsolda şu komutu girin:

{% highlight sh %}
bundle
{% endhighlight %}

Şimdi uploadları işlemek için kod yazabiliriz. Konsolda şu komutu girin:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

Eğer uploader bulunamadığını belirten bir hata çıktısı verirse dosyaya şu satırı da ekleyin:

{% highlight ruby %}
gem 'net-ssh'
{% endhighlight %}

Tabi bunu ekledikten sonra konsolda tekrar:

{% highlight sh %}
bundle
{% endhighlight %}

çalıştırmalısınız.

`app/models/idea.rb` dosyasını editörde açın ve şu satırın altına

{% highlight ruby %}
class Idea < ApplicationRecord
{% endhighlight %}

şunu ekleyin

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

`app/views/ideas/_form.html.erb` dosyasını açın ve

{% highlight erb %}
<%= form.text_field :picture %>
{% endhighlight %}

satırını şöyle değiştirin

{% highlight erb %}
<%= form.file_field :picture %>
{% endhighlight %}

Tarayıcınızda resimle beraber yeni bir fikif ekleyin. Eklediğiniz kaydı gösteren sayfaya geçince sadece resim dosyanızın path'ini yazı olarak gösterecektir. O zaman bunu da düzenleyelim.

Fikirin gösteriminde resim olarak görünmesini isteiyorsanız `app/views/ideas/show.html.erb` dosyasını açın ve şöyle değiştirin

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

yerine

{% highlight erb %}
<%= image_tag(@idea.picture_url, width: 600) if @idea.picture.present? %>
{% endhighlight %}

Resimin ayrıca index sayfasındaki liste de görünmesini sağlamak için `app/views/ideas/index.html.erb` dosyasını açın ve şu satırı

{% highlight erb %}
<%= idea.picture %>
{% endhighlight %}

böyle değiştirin

{% highlight erb %}
<%= image_tag idea.picture_url, width: '100%' if idea.picture.present? %>
{% endhighlight %}

Şimdi tarayıcınızda sayfayı yenileyin ve ne değiştiğini görün.
Not: Bazıları Rails server'ı ikinci bir konsolda sürekli çalıştırmayı tercih eder.

**Eğitmen:** Biraz HTML hakkında konuşun.


## *5.* Linklere ince ayar

Eğer <http://localhost:3000> sayfasını açarsanız hala "Yay! You’re on Rails!" sayfasını gösterdiğini görürsünüz. Hadi bir yönlendirme ile fikirler sayfasına gitmesini sağlayalım.

`config/routes.rb` dosyasını açın ve ilk satırdan sonrasına şunu ekleyin

{% highlight ruby %}
root to: redirect('/ideas')
{% endhighlight %}

Açılış sayfasına giderek değişimi test edin ( <http://localhost:3000/> sayfası).

**Eğitmen:** Route'lar ve bunların sıralamalarını ve statik dosyalarla ilişkilerini anlatın.

## *6.* Uygulamanıza bir statik sayfa ekleyin

Hadi sayfamıza uygulamanın yazarının yani sizin hakkınızda bilgi verecek bir sayfa ekleyelim

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

Bu komut `app/views` klasörü altında `/pages` adında yeni bir alt klasör üretir ve onun altında sizin bilgi sayfanız olacak `info.html.erb` dosyasını üretir.

Ayrıca `config/routes.rb` dosyasına basit bir route ekler.

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Şimdi `app/views/pages/info.html.erb` dosyasını açın ve içine hakkınızdaki bilgileri HTML olarak yazın. Yeni sayfanızı görmek için tarayıcıda <http://localhost:3000/pages/info> sayfasını açın.

## *7.* Gezinti barına bir buton ekleyin

Statik sayfanızın çalıştığını gördünüz, hadi navigasyon barında ilave bir buton koyarak ziyaretçilere sayfaya gitmeleri için link sunun.

Editörde `app/views/layouts/application.html.erb` dosyasını açın ve şu satırın altına

{% highlight html %}
<li class="nav-item active">
  <a class="nav-link" href="/ideas">Ideas</a>
</li>
{% endhighlight %}

şunları ekleyin

{% highlight html %}
<li class="nav-item">
  <a class="nav-link" href="/pages/info">Info</a>
</li>
{% endhighlight %}

Sayfayı yenileyin ve yeni tanımladığınız linki tıklayarak çalışmasını test edin.

## *8.* Sonraki adım ne?

* Tasarımı HTML &amp; CSS kullanarak geliştirin
* Oylama ekleyin
* CoffeeScript (veya JavaScript) kullanarak interaksiyon ekleyin
* Resim boyutlandırma ekleyerek resim yüklemesini hızlandırın

{% include other-guides.md page="app" %}
