---
layout: default
title: Rails Girls Günlük tutorial
permalink: diary-app
---

# Ruby on Rails ile ilk günlük uygulamanızı yapın

*Created by Piotr Szotkowski ([chastell](http://chastell.net)) and Tomasz Stachewicz ([tomash](http://tomash.wrug.eu/about.html))*

Web geliştirme iskeleti Ruby on Rails kullanarak küçük bir oylama uygulaması yapacağız. İlk uygulamanızın ne olmasını düşünürsünüz - bazı sıralı bilgiler içeren basit bir şey olabilir: örn., yapılacaklar listesi, bir günlük vs. Biz burada günlük olarak tercih edeceğiz.

__EĞİTMEN__: Bu biraz farklı yeni başlayanlar eğitiminin arkasındaki mantık için, şuna bir göz atın [post](http://dotclass.org/rails-girls-warsaw-programme/).


**Rails kurulu olduğundan emin olun.** [**Kurulum klavuzuna bakarak**](/install) Rails kurabilirsiniz.


## Gerekli araçlar

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Text Editörü

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  Vim ve Emacs dosyaları yazmak ve düzenlemek için kullanabileceğiniz editörlere örnekler.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Konsol (Windows'ta Command Prompt ya da Komut İsteği olarak bilinir)

* Rails server ve komutlarını çalıştırabileceğiniz yer.

<h3><i class="icon-browser">&nbsp;</i></h3>

### Web tarayıcı

* Uygulamanızı göreceğiniz uygulama (Firefox, Safari, Chrome).

__EĞİTMEN__: Kuruluma yardımcı olun; editörlerin doğru ayarlandığından emin olun (mesela dosyaların yazı kodlaması UTF-8 olduğundan emin olun).

</div>

### Önemli

İşletim sisteminize uygun komutları seçmeniz önemlidir - Windows, Mac ya da Linux konsollarında komutlar arasında bazı küçük farklar olabilir. Eğer sorun olursa komutların altındaki işletim sistemi sviç linklerini kullanın. Cloud servis kullanıyorsanız Windows bilgisayar kullanıyor olsanız bile servisteki Linux komutları geçerli olacaktır.

## Saf HTML

### Dosya ve klasör

Yeni bir klasör oluşturun ve içinde `index.html` adında bir dosya ekleyin. Bu dosyayı editörünüzde ve tarayıcınızda açın.

__EĞİTMEN__: Tarayıcıların yerel dosyaları da açabildiğini, sadece URL'nin alışılmışın dışında olduğunu açıklayın.

### HTML iskeleti

Standart HTML yapısını dosyaya ekleyerek başlayalım. `index.html` dosyasına şunları ekleyin:

{% highlight erb %}
<!doctype html>
<html>
  <head>
    <title>Benim küçük web sayfam: Kodlamak Büyüleyicidir</title>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="https://raw.githubusercontent.com/krzysztofbialek/Rails-Girls-Warsaw-App/master/style.css" />
  </head>
  <body>
  </body>
</html>
{% endhighlight %}

__EĞİTMEN__: HTML'nin iki parçasını açıklayın, `<head>` ve `<body>`. `<title>` tag'i açıklayın ve gerekirse `<meta>` , `<link>` ve `<script>` tag'lerini de.  Bootstrap varken CSS konusu pas geçilebilir (katılımcılar istemedikçe).

### İlk görülebilir içerik

`<body>` ve `</body>` tag'leri arasına aşağıdaki HTML kodu yazın (içeriği istediğiniz gibi değiştirebilirsiniz…):

{% highlight erb %}
<h1>Benim Rails Girls Günlüğüm</h1>
  <div>
    <h2>Bir Rails Girls Uygulaması Gönderdim</h2>
      <p>1.02.2014</p>
      <p>Az önce Rails Girls atölyesine bir uygulama gönderdim. Beni alıp almayacaklarını sabırsızca bekliyorum!</p>
      <h2>Alındım!</h2>
      <p>15.02.2014</p>
      <p>Uygulamamın kabul edildiğine dair bir email aldım! Önümüzdeki hafta RG atölyesinde olacağım!</p>
    <h2>Ve ilk gün başlar…</h2>
      <p>22.02.2014</p>
      <p>Bugün Rails Girls atölyesinin ilk günü. Eğitmenim biraz ilginç biri ama gördüğüm kadarıyla hepimizde Rails kuruldu ve öğrenmeye başlamaya hazırız.</p>
  </div>
{% endhighlight %}

Bunlar sizin ilk üç günlük yazılarınız. Bunları göstermek için kullanılan değişik tag'lere dikkat edin.

__EĞİTİM__: HTML tag'leri ve anlamları hakkında anlatın.

### Daha fazla HTML

Aşağıdakileri günlük yazılarınızdan sonra ya da öncesine ekleyin (tekrar, zevkinize göre ayarlayın):

{% highlight erb %}
<div>
  <h1>Favori websitelerim</h1>
    <ul>
      <li><a href="http://railsgirls.com">Rails Girls</a></li>
      <li><a href="https://en.wikibooks.org/wiki/Ruby_Programming">Wikibooks</a></li>
      <li><a href="http://guides.rubyonrails.org">Ruby on Rails Guides</a></li>
    </ul>
  </div>
  <img src="http://railsgirls.com/images/rg-warsaw.png" />
{% endhighlight %}

Bu bir HTML sırasız liste görünümü, liste elemanları başka URL'le web sitelerine linklerden oluşuyor. Arkasından bir dış URL'den alınmış resimi içeren bir paragraf var.

__EĞİTMEN__: Web'in nasıl çalıştığı , HTML elmanları ve özellikleri hakkında kısaca anlatın.

[Burada](https://github.com/krzysztofbialek/Rails-Girls-Warsaw-App) stilleri oluşturulmuş bir uygulamanın repo'sunu bulabilirsiniz.

## Rails'e Geçiş

__EĞİTMEN__: Eğer talebeleriniz Windows kullanıyorsa, takip eden kısımlar için Nitrous.IO kullandıkları düşünülmüştür.

### Yeni Rails uygulaması

Bir terminal penceresi açın (Windows'ta komut isteği), klasörü projelerinizi koyduğunuz klasöre değiştirin ( `cd` komutu kullanarak) ve `rails new diary` komutu girin – bu biraz zaman alacak ve yeni Rails uygulamasının üretilmesi ile bitecektir. `cd diary` ile uygulama klasörüne girin.

__EĞİTMEN__: Klasörler arasında nasıl gezinileceğini ve komutların nasıl çalıştırılacağını açıklayın.

### Server çalıştırılması

`diary` klasörüne geçtikten sonra `rails server` komutunu çalıştırın ve (başalmasını bitirdikten sonra) [http://localhost:3000](http://localhost:3000) adresini tarayıcınızda açın. Rails'e hoşgeldiniz sayfası açılacaktır. Server'ı `ctrl-c` basarak durdurun.

__EĞİTMEN__: Konsol penceresinde ne çıktılar geldiyse açıklayın. Eğer server Javascript runtime yüzünden hata verir başlamazsa, `gem install therubyracer` çalıştırın ve `Gemfile` içinde ilgili satırın yorum tikini kaldırın.

### İlk route ve görseli

Bir kontrolör ve route oluşturun

`rails generate controller welcome index` komutu girin – bu ilk kontrolörünüz ve ona ait route üretecektir. Server'ınızı çalıştırın ve [http://localhost:3000](http://localhost:3000) adresine giderek uygulamanızın `/welcome/index` route desteklediğini deneyin.

Server'ı durdurun ve `rake routes` komutu girerek uygulamanızın desteklediği tüm route'ları görün.

__EĞİTMEN__: URL'ler ve URL hiyerarşisini açıklayın. Rails URL'lerinin nasıl çalıştığını, arkaplanda neler olduğunu açıklayın.

### Görseli sitenizin en üstüne gönderin

`config/routes.rb` dosyasını açın ve `root ’welcome#index’` satırının önündeki yorum tikini kaldırın ( # işareti ). 7. satır civarında olmalı. Bu uygulamanızın ana route'unu `Welcome#index` aksiyonuna yönlendirir. [http://localhost:3000](http://localhost:3000) sayfasına gidin ve yeni sayfanızın geldiğini görün (Rails hoşgeldiniz sayfası yerine).

__EĞİTMEN__: Bir uygulamanın ana sayfasının URL hiyerarşisinin root olduğunu ve kullanıcıların domain adını tarayıcının adres çubuğuna girdiklerinde ziyaret ettikleri sayfa olduğunu açıklayın.

### Önceki yazdıklarınızı doğru görsele koyalım

`app/views/welcome/index.html.erb` dosyasını editörde açın daha önceki `ìndex.html` dosyasında `<body>` tag'leri arasında kalanları kopyalayın (örn., günlük listeleri ve linkler), görselde bulunan mevcut `<h1>` ve `<p>` satırlarını silin. Tarayıcıda sayfasyı yenileyip sayfada artık istediğimiz içerik olduğunu görün.

__EĞİTMEN__: Görselde sadece `<body>` ve `</body>` arasındakilerin bulunduğunu, geri kalanın tamamının uygulama genelinde kullanılmak üzere başka yerlerde bulunduğunu açıklayın.

## İterasyon

### Tekrarlayan içerik

Eğer link listenize bakarsanız, her liste elemanının birbirine benzer yapıda olduğunu görürsünüz – Bir URL (kullanıcı tıkladığında başka sayfaya gidilecek adres bilgisi) ve bir isi (kullanıcının gördüğü ve üzerine tıkladığı yazı). Linkleri salt HTML yazmak yerine (ve bazılarını yazarken hata yapma ihtimaline karşı) bunu düzenlemek için bir URL-isim kolleksiyonu üzerinden iterasyon ile gidelim.

`<ul>` tag'leri arasını aşağıdaki ile değiştirin:

{% highlight html %}
<%
  @websites = [
    ["http://railsgirls.com", "Rails Girls"],
    ["https://en.wikibooks.org/wiki/Ruby_Programming", "Wikibooks"],
    ["http://guides.rubyonrails.org", "Ruby on Rails Guides"],
  ]
%>
<% for url, name in @websites %>
  <li><a href="<%= url %>"><%= name %></a></li>
<% end %>
{% endhighlight %}

Tarayıcıyı yenilediğinizde liklerinizin halen aynı şekilde göründüğünü farkedeceksiniz.

__EĞİTMEN__: Neler olduğunu açıklayın – array nedir, `<%` ve `<%=` ERb tag'leri ne anlama gelir (ve farkları nedir), iterasyon nasıl çalışıyor.

Kod ya da veriyi (yukarıdaki `@websites` array gibi) görsel dosyasına koymak kolay, fakat kötü bir tasarım şekli, uzun vadede can yakabilir. Başlangıç olarak `@websites` array verisini görselden kontrolör dosyasına taşıyalım. Oradan silin ve `app/controllers/welcome_controller.rb` içindeki `index` metoduna koyun. Şöyle görünecektir:

{% highlight ruby %}
class WelcomeController < ApplicationController
  def index
    @websites = [
      ["http://railsgirls.com", "Rails Girls"],
      ["https://en.wikibooks.org/wiki/Ruby_Programming", "Wikibooks"],
      ["http://guides.rubyonrails.org", "Ruby on Rails Guides"],
    ]
  end
end
{% endhighlight %}

Dikkat edin sayfayı yeniledikten sonra bir şey değişmeyecektir – bunun sebebi @ ile başlayan değişkenler (bunlara oluşum değişkeni denir) görselden ve kontrolörden görülebilir.

__EĞİTMEN__: `WecomeController#index` aksiyonu ve görsel arasındaki bağlantıyı anlatın; @ ile başlayan `@websites` ve düz değişken ismi olan `url` veya `name` arasındaki farkları vurgulayın.

### Model oluşturun

Web sitesi linklerini olması gereken yere taşıdıktan sonra, bişeyler de günlük verileri için yapalım. Bu sefer array gibi basit bir Ruby yapısı kullanmayacağız, girilen verileri bir model kullanarak kaydedeceğiz. Hadi modeli üreterek başlayalım – `rails generate model Entry title:string date:date contents:text` komutu girerek günlük verilerini bir etiket, bir yayınlama tarihi ve bir içerikten oluşan bir `Entry` modeli oluştururuz.

__EĞİTMEN__: Modeller nedir ve oluştururken kullanılan `field:type` notasyonu nedir açıklayın; gerek duyarsanız `string` ve `text` tipleri arasındaki farkı açıklayın.

### Veri tabanı migrasyonu

`rails db:migrate` çalıştırarak veritabanına modelimizi tanıtırız. Modelin yapısında verilerimizi kayıt için bir tablo oluşur.

__EĞİTMEN__: Veritabanlarının ne olduğunu ve onlara neden gerek olduğunu anlatın (Model yapısına bağlı kalarak uygulamamızın verilerini saklamak için kaplar gibi özel anlatımlarla). Bellekte olan şeylerin kalıcı olamayacağını ve tekrar gerektiğinde kullanmak için kalıcı olarak saklanması ihtiyacı  olduğunu anlatın.

### Rails konsolda model ile çalışmak

Artık bir modelimiz var. Bu modelin oluşumlarını üretebiliriz (yani bu model yapısında veriler girebiliriz) – örneğin HTML görselde olan günlük girdileri. Bu amaçla yeni bir araç öğreneceğiz: Rails konsol. `rails console` yazarak çalıştırın size `>>` şeklinde bir prompt çıkar, birkaç giriş yapalım:

{% highlight sh %}
>> Entry.create "title" => "Bir Rails Girls Uygulaması Gönderdim", "date" => Date.new(2014, 2, 1), "contents" => "Az önce Rails Girls atölyesine bir uygulama gönderdim. Beni alıp almayacaklarını sabırsızca bekliyorum!"
…
>> Entry.create "title" => "Alındım!", "date" => Date.new(2014, 2, 15), "contents" => "Uygulamamın kabul edildiğine dair bir email aldım! Önümüzdeki hafta RG atölyesinde olacağım!"
…
>> Entry.create "title" => "Ve ilk gün başlar…", "date" => Date.new(2014, 2, 22), "contents" => "Bugün Rails Girls atölyesinin ilk günü. Eğitmenim biraz ilginç biri ama gördüğüm kadarıyla hepimizde Rails kuruldu ve öğrenmeye başlamaya hazırız."
{% endhighlight %}

Konsola dikkat edin – aynı `rails server` gibi – arkaplanda ne olduğunu size tek tek gösteriyor. Tüm girilen verileri bir array içinde almak için `Entry.all` komutu kullanabilirsiniz.

__EĞİTMEN__: Çok yavaş olarak neler olduğunu anlatın.

## Kaydedilen içeriği göstermek

### Model oluşumlarını mevcut görsele ekleyin

`WelcomeController#index` aksiyonunu açın (`app/controllers/welcome_controller.rb` dosyası içinde) ve aşağıdaki kodu `@websites` tanımlamasının altına ya da üstüne bir yere yazın:

{% highlight ruby %}
@entries = Entry.all
{% endhighlight %}

`app/views/welcome/index.html.erb` görsel dosyasını açın ve günlük yazılarının olduğu kısım yerine şunları yazın:

{% highlight erb %}
<% for entry in @entries %>
  <h2><%= entry.title %></h2>
    <p><%= entry.date %></p>
    <p><%= entry.contents %></p>
<% end %>
{% endhighlight %}

__EĞİTMEN__: Neler olduğunu açıklayın; girdilerin sıralaması nasıl, başka bir sıralama nasıl olur (mesela tarihe göre ters sıralı). Ve nerede yapılır bu iş?

### Günlük girdileri için bir kontrolör oluşturun

Artık bir modelimiz var, şimdi bu modelin oluşunlarını yönetmek için aksiyonlara ihtiyacımız var (yeni girdiler üretmek, göstermek, düzenlemek ve mevcut olanı silmek). Konsolda `rails generate controller Entries` – bu komutla `EntriesController` sınıfı oluşturulur. `rake routes` ile kontrol edin – dikkat ederseniz kontrolör yetersiz, hala kontrolör aksiyonlarını gösteren URL'lere ihtiyaç var.

`config/routes.rb` dosyasını açın ve `resources "entries"` satırını `Diary::Application.routes.draw` bloğu içinde bir yere ekleyin. Tekrar `rake routes` çalıştırın: dikkat ederseniz uyuglamanız artık tüm yeni route'lara sahip.

__EĞİTMEN__: Rails'in route yapısının çalışmasını ve her birinin mevcut kontrolör aksiyonlarına nasıl yönlendiğini anlatın.

### Tüm girdiler için bir görsel

`rake routes` çıktısında gördüğümüz gibi, URL'ler ilgili kontrolör aksiyonlarına bağlanıyor. Bakalım ne eksik – [http://localhost:3000/entries](http://localhost:3000/entries) adresini tarayıcınızda ziyaret edin. A-aaa, sanırım "index" aksiyonumuz yok – hadi ekleyelim – `app/controllers/entries_controller.rb` açın ve aşağıdaki boş metodu sınıf tanımlamasının içine ekleyin:

{% highlight ruby %}
def index
end
{% endhighlight %}

Tarayıcıda sayfayı yenileyin – artık bir ‘unknown action’ problemimiz yok, şimdi de ‘template is missing’ problemi var. `app/views/entries/index.html.erb` adında boş bir dosya oluşturun (not, bu "welcome" klasörü altındaki `index.html.erb` dosyası gibi, fakat bu sefer "entries" klasörüaltında) ve sayfayı tekrar yenileyin – boş bir sayfa gelmeli. Doğrudur, çünkü görsel dosyamızın içi henüz boş.

__EĞİTMEN__: Aksiyonların ilgili görsel dosyalarını default olarak nasıl yayınladığını açıklayın.

Şimdi `app/controllers/welcome_controller.rb` dosyasına gidin ve `WelcomeController#index` metodunu bulun (`def index` diye başlayan). `@entries` değişkenine değer girilen satırı bulun (`@entries =` diye başlayan yer) ve onu  `EntriesController#index` metoduna kopyalayın (yani `EntriesController` içindeki `ìndex` metodu, `app/controllers/entries_controller.rb` içinde bulunur). Benzer olarak `app/views/welcome/index.html.erb` görseline gidin ve `@entries.each` bloğunu (tüm içindeki satırlar ve `end` satırıyla beraber) `app/views/entries/index.html.erb` görseline kopyalayın. Sayfayı yenileyin: artık boş değil, türm girdilerin listesi çıkacaktır.

__EĞİTMEN__: İşe yaramayan küçük bir şey gibi görünmesine rağmen önemli bir değişiklik var: artık uygulama ana sayfamızın içeriğiyle değil sadece günlük girdilerinin listesiyle ilgilendiğimizi açıklayın (diğer web sitelerine limkler olamksızın, for example).

### Tek bir girişin görseli

Dikkat ederseniz, `rake routes` çalıştırınca, çıktı `/entries/:id(.:format)` paterninde bir route `entries#show` aksiyonuna yönleniyor. [http://localhost:3000/entries/1](http://localhost:3000/entries/1) adresine gidin – ilk günlük girdinizin URL'si; karşımıza tekrar `EntriesController` içinde eksik bir aksiyon hata bildirisi çıkacaktır. Bu aksiyonu da ekleyin (şimdilik içi boş olarak), sonra sayfayı yenileyince ne olacak? görsel eksik hata mesajı.

__EĞİTMEN__: İhtiyaç olduğunda eksik aksiyon veya görselin eklenmesini tarif edin; prosesin tam anlaşıldığından emin olun (`rake routes` komutunun çıktısında görünen tüm route'lar nereleri gösterir) is well understood.

Şimdi URL sonundaki bu `1` bilgisini doğru veriyi seçmek için nasıl kullanırız. `EntriesController#show` aksiyonunun şöyle olmasını sağlayın:

{% highlight ruby %}
def show
  @entry = Entry.find(params["id"])
end
{% endhighlight %}

Bu satırın anlamı "`id` parametresini al ve onu `Entry.find` metodunda kullanarak doğru veriyi bul". Şimdi `app/views/entries/show.html.erb` görselini üretin ve içine şunları yazın:

{% highlight erb %}
<h2><%= @entry.title %></h2>
  <p><%= @entry.date %></p>
  <p><%= @entry.contents %></p>
{% endhighlight %}

[http://localhost:3000/entries/1](http://localhost:3000/entries/1) sayfasını ziyeret edin ve [http://localhost:3000/entries/2](http://localhost:3000/entries/2) ile arasındaki farka bakarak `params[’id’]` ile farklı günlük girdilerinin gösterildiğini görün.

__EĞİTMEN__: `rake routes` de görülen URL bilgisinin `:id` parçası `params` hash listesine key olarak geliyor; `params` hash'i içinde başka ne bilgiler bulunabilir tartışın.

### Girdilere link eklemek

`rake routes` komutunu tekrar çalıştırın; 'preifx' sütununda `entry` olan `entries#show` satırına bakın. `app/views/entries/index.html.erb` görseline gidin ve etiketi gösteren satırı aşağıdaki gibi değiştirin:

{% highlight erb %}
<h2><%= link_to(entry.title, entry_path(entry)) %></h2>
{% endhighlight %}

`link_to` metodu iki parametre alır, gösterilecek yazı (`entry.title`) ve link bilgisi. Sayfa kaynağına bakarak listedeki başlıkların linklerinin nereler olduğuna bakın. `entry_path` metoduna `entry` argümanı verince linkler nasıl gelmiş.

__EĞİTMEN__: HTML linklerinin nasıl olduğunu hatırlatın. `entry_path` ve `rake routes` deki `entry` prefixli route arasındaki lişkiyi anlatın. `entry_path` metodunun neden `entry` argümanına ihtiyacı olduğunu açıklayın. İsterseniz `entry_url` metodunun ne yaptığını açıklayın (ve `entry_path` metodundan farklı ne yapar).

Şimdi girdiyi gösteren sayfadan ana listenin olduğu sayfaya geri dönüş ekleyelim: `app/views/entries/show.html.erb` görsel kalıbını açın ve index sayfasına bir link ekleyin:

{% highlight erb %}
<p><%= link_to("Back to all entries", entries_path) %></p>
{% endhighlight %}

Noti yine prefix'i `entries` olan `rake routes` çıktı satırı `entries_path` metod ismini oluşturmak için kullanılmış. Bu metodun parametreye neden ihtiyacı olmadığını sorgulayın.

## UI yoluyla yeni girdi oluşturmak

### ‘new entry’ formu eklemek

Şu anda girdilerin bir listesini ve sadece bir girdiyi göstermek için yolumuz var, hadi yeni günlük girdisi oluşturmak için de bir yol ekleyelim. `rake routes` çalıştırıp yeni girdi oluşturma URL'si (ve aksiyonunu) bulun.

Index sayfasına gidin ve yeni girdi için bir link ekleyin:

{% highlight erb %}
<%= link_to("New entry", new_entry_path) %>
{% endhighlight %}

Linke tıklayın – ve eksik olan aksiyonla görseli ekleyin.

__EĞİTMEN__: Bu prosesin doğru anlanmış olduğundan emin olun.

`app/views/entries/new.html.erb` dosyasını açın ve aşağıdakini yazın:

{% highlight erb %}
<%= form_for(Entry.new) do |form| %>
  <p><%= form.label("Başlık") %></p>
  <p><%= form.text_field("title") %></p>
  <p><%= form.label("İçeriik") %></p>
  <p><%= form.text_area("contents") %></p>
  <p><%= form.submit("Gönder") %></p>
<% end %>
<p><%= link_to("Tüm kayıtlar listesine dön", entries_path) %></p>
{% endhighlight %}

__EĞİTMEN__: `form_for` yardımcısı ile üretilen HTML kodunun neye benzediğini gösterin ve nasıl çalıştığını açıklamaya çalışın.

### ‘new entry’ formunu işlemek

Tarayıcıyı yenileyip formdan yeni bir günlük girin – artık çok iyi tanıdığınız ‘unknown action’ hatası alacaksınız. Aksiyonu `EntriesController` sınıfına ekleyin, fakat yeni başlayanlar için aksiyonun ne bilgiler aldığını gösterelim:

{% highlight ruby %}
def create
  render(:text => params.inspect)
end
{% endhighlight %}

Tarayıcıda sayfayı yenileyin ve aksiyonun parametre olarak neler aldığına bakın.

__EĞİTMEN__: Bir text field ve text area doldurup butona tıklayıp submit ederek kontrolör aksiyonuna POST işlemi ile gönderilmesinin parametrelere nasıl yansıdığını anlatın. ".inspect" metodu ne iş yapar açıklayın.

### Yeni girdi oluşturma ve kaydetme

`create` aksiyonunu düzenleyerek şu hale getirin:

{% highlight ruby %}
def create
  entry_params = params["entry"]
  entry = Entry.create(entry_params)
  redirect_to(entry_path(entry))
end
{% endhighlight %}

`params` hash değişkeninden yeni girdinin parametrelerini (etiketi ve içeriği) nasıl aldığımıza ve onlarla aynı konsoldaki gibi nasıl yeni bir girdi oluşturduğumuza dikkat edin. Formu tekrar göndermeyi deneyin fakat hala bir hata var `ActiveModel::ForbiddenAttributesError`.

- Not: strong_parameters'i en başta iptal edebilirdik in the beginning, uygulamayı parametre enjeksiyonundan koruyarak.
- config.action_controller.permit_all_parameters = true
- ^^ evet, ama yakında uzaklaştırılacak.
- belki atölye çalışması bitmeden ;)

Bu hata güvenlik kuralları yüzünden geldi – bu basit bir POST ve kullanıcı oraya ne isterse girebilir, Rails bizi ayarlaması beklenmeyen parametreleri değiştirmek isteyen ('id' gibi) kötü niyetli kullanıcılardan bizi koruyor. Kullanıcının hangi parametreleri girebileceğini kısıtlamamız gerekiyor; `create` aksiyonunun ilk satırını şöyle değiştirin:

{% highlight ruby %}
entry_params = params["entry"].permit("title", "contents")
{% endhighlight %}

Şimdi formu tekrar göndermeyi deneyin – bu sefer çalışacak ve yeni girilen veriyi gösteren sayfaya yönlendirileceksiniz.

__EĞİTMEN__: `params` içinden doğru parametrelerin çekilmesi mantığının iyi anlaşıldığından emin olun ve gereken parametrelerin özel olarak seçilmesi gereğini anlatın.


## UI ile girdi düzenleme

### ‘edit entry’ formu eklemek

Şu anda girdileri görebiliyor ve yenisini ekleyebiliyoruz, hadi mevcut olanı düzenlemenin bir yolunu da ekleyelim. `rake routes` çalıştırın ve bir girdiyi edit etmek için gereken route satırını bulun.

__EĞİTMEN__: Bu konun iyi anlaşıldığından emin olun.

`app/views/entries/show.html.erb` dosyasını açın ve aşağıdaki linki biryerlere ekleyin:

{% highlight erb %}
<p><%= link_to("Bu gönderiyi düzenle", edit_entry_path(@entry)) %></p>
{% endhighlight %}

Girdi görüntülediğiniz sayfayı yenileyin ve düzenlemek için linke tıklayın. Eksik olan aksiyonu ve boş bir görsel dosyasını ekleyin.

__EĞİTMEN__: Bunun da tam anlaşıldığından emin olun.

İlk önce `edit` aksiyonunun doğru girdiyi aldığından emin olalım. `show` aksiyonunda olanın aynısını `edit` aksiyonu da yapsın – yani verilen URL'den id'sini alsın:

{% highlight ruby %}
def edit
  @entry = Entry.find(params["id"])
end
{% endhighlight %}

Şimdi `app/views/entries/new.html.erb` görselinin içeriğini `app/views/entries/edit.html.erb` görseline kopyalayın, ama sadece ilk satırı değiştirerek sözkonusu girdi bilgilerini işleyeceğini belirtin – ve opsiyonel olarak bu girdinin gösterildiği sayfaya bir geri link ekleyin:

{% highlight erb %}
<%= form_for(@entry) do |form| %>
  <p><%= form.label("Başlık") %></p>
  <p><%= form.text_field("title") %></p>
  <p><%= form.label("İçerik") %></p>
  <p><%= form.text_area("contents") %></p>
  <p><%= form.submit %></p>
<% end %>
<p><%= link_to("Bu girdiye geri dön", entry_path(@entry)) %></p>
<p><%= link_to("Tüm kayıtlar listesine dön", entries_path) %></p>
{% endhighlight %}

__EĞİTMEN__: Tüm bunların iyi anlaşıldığından emin olun.

Şimdi formu göndermeyi deneyin – hangi aksiyon hala kayıp? Kontrolör içine ekleyin:

{% highlight ruby %}
def update
  entry_params = params["entry"].permit("title", "contents")
  entry = Entry.find(params["id"])
  entry.update(entry_params)
  redirect_to(entry_path(entry))
end
{% endhighlight %}

Herşeyin çalıştığını ve girdiyi düzenleyebildiğinizi kontrol edin.

__EĞİTMEN__: `update` aksiyonu içeriğinin iyi anlaşıldığından emin olun – parametrelerin kısıtlayarak seçilmesinden doğru girdinin düzenlenmesine ve girdi gösterim sayfasına geri yönlendirilmesine kadar.

## Başka fikirler

Uygulamanızla oynayın. İşte size eklenebilecek bazı başka özellikler:

- Formu parça form olarak işlemek
- Girdileri düzenleme linklerini ana liste sayfasına eklemek,
- bir girdiyi silme yolu,
- gönderi tarihlerini düzenleme seçeneği,
- Web siteleri URL'lerini ve isimlerini saklamak için bir model oluşturmak (ana sayfada bulunan liste),
- Gönderi tarihini ileri bir tarihe ayarlamak ve index listede tarihi gelmemiş gönderileri göstermemek,
- video URL'lerinin gönderi içeriğine otomatik eklenmesi,
- birden fazla yazarın girdisine imkan tanımak,
- girdilere kategorize etme özelliği eklenmesi,
- resimler eklenmesi ve gösterilmesi.

{% include other-guides.md page="diary-app" %}
